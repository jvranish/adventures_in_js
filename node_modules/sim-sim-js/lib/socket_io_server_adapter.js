(function() {
  var EventEmitter, SocketIOServerAdapter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  SocketIOServerAdapter = (function(_super) {
    __extends(SocketIOServerAdapter, _super);

    function SocketIOServerAdapter(socketIO) {
      this.socketIO = socketIO;
      this._clients = {};
      this.clientIds = [];
      this._refreshClientIds();
      this._setupConnHandlers();
    }

    SocketIOServerAdapter.prototype.clientCount = function() {
      return this.clientIds.length;
    };

    SocketIOServerAdapter.prototype.send = function(id, data) {
      var client;
      client = this._clients[id];
      if (client) {
        return this._clients[id].emit('data', data);
      } else {
        return console.log("SocketIOServerAdapter#send('" + id + "'): No client with that id. Wanted to send data:", data);
      }
    };

    SocketIOServerAdapter.prototype.broadcast = function(data) {
      return this.socketIO.sockets.emit('data', data);
    };

    SocketIOServerAdapter.prototype._setupConnHandlers = function() {
      return this.socketIO.sockets.on('connection', (function(_this) {
        return function(socket) {
          var id;
          id = socket.id;
          _this._storeClient(id, socket);
          socket.on('data', function(data) {
            return _this.emit('Network::PeerPacket', id, data);
          });
          socket.on('disconnect', function() {
            _this._removeClient(id);
            return _this.emit('Network::PeerDisconnected', id);
          });
          return _this.emit('Network::PeerConnected', id);
        };
      })(this));
    };

    SocketIOServerAdapter.prototype._storeClient = function(id, socket) {
      this._clients[id] = socket;
      return this._refreshClientIds();
    };

    SocketIOServerAdapter.prototype._removeClient = function(id) {
      delete this._clients[id];
      return this._refreshClientIds();
    };

    SocketIOServerAdapter.prototype._refreshClientIds = function() {
      var id, socket;
      return this.clientIds = (function() {
        var _ref, _results;
        _ref = this._clients;
        _results = [];
        for (id in _ref) {
          socket = _ref[id];
          _results.push(id);
        }
        return _results;
      }).call(this);
    };

    return SocketIOServerAdapter;

  })(EventEmitter);

  module.exports = SocketIOServerAdapter;

}).call(this);
