(function() {
  var EventEmitter, Timer,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  Timer = (function(_super) {
    __extends(Timer, _super);

    function Timer(period, f) {
      this.period = period;
      if (f) {
        this.on('tick', f);
      }
      this.reset();
    }

    Timer.prototype.reset = function() {
      this.lastTime = null;
      return this.elapsed = 0;
    };

    Timer.prototype.start = function() {
      this.lastTime = this._getTime();
      return this.interval = setInterval(((function(_this) {
        return function() {
          var dt, now;
          now = _this._getTime();
          dt = now - _this.lastTime;
          _this.elapsed += dt;
          _this.emit('tick', dt, _this.elapsed);
          return _this.lastTime = now;
        };
      })(this)), this.period);
    };

    Timer.prototype.stop = function() {
      if (this.interval) {
        clearInterval(this.interval);
      }
      return this.interval = null;
    };

    Timer.prototype._getTime = function() {
      return new Date().getTime();
    };

    return Timer;

  })(EventEmitter);

  module.exports = Timer;

}).call(this);
