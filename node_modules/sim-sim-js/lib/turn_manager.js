(function() {
  var EventEmitter, Timer, TurnManager,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  Timer = require('./timer');

  TurnManager = (function(_super) {
    __extends(TurnManager, _super);

    function TurnManager(period) {
      this.period = period;
      this.active = false;
      this.timer = new Timer(this.period, ((function(_this) {
        return function(dt, elapsed) {
          if (_this.active) {
            _this.emit('turn_ended', _this.current, dt, elapsed);
            return _this.current += 1;
          }
        };
      })(this)));
      this.current = 0;
    }

    TurnManager.prototype.start = function() {
      this.active = true;
      return this.timer.start();
    };

    TurnManager.prototype.stop = function() {
      this.active = false;
      return this.timer.stop();
    };

    TurnManager.prototype.reset = function() {
      return this.current = 0;
    };

    return TurnManager;

  })(EventEmitter);

  module.exports = TurnManager;

}).call(this);
