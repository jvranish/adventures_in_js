(function() {
  var SyncManager,
    __slice = [].slice;

  SyncManager = (function() {
    function SyncManager() {
      this._debugOn = false;
      this.sums = {};
      this.count = 0;
      this.max = 0;
      this.minorConsensus = null;
      this.defaultProviderCrc = null;
    }

    SyncManager.prototype.turnEnded = function(turnNumber) {
      this.turnNumber = turnNumber;
      this.sums = {};
      this.count = 0;
      this.max = 0;
      this.minorConsensus = null;
      return this.defaultProviderCrc = null;
    };

    SyncManager.prototype.gotChecksum = function(_arg) {
      var authorityChecksum, authorityLabel, bros, checksum, clientIds, crc, defaultProviderId, errantId, playerId, playerIds, providerId, resync, turnNumber, _ref, _results;
      playerId = _arg.playerId, turnNumber = _arg.turnNumber, checksum = _arg.checksum, clientIds = _arg.clientIds, defaultProviderId = _arg.defaultProviderId, resync = _arg.resync;
      if (clientIds.length <= 1) {
        return null;
      }
      checksum = "" + checksum;
      if (turnNumber === this.turnNumber) {
        this.count += 1;
        bros = this.sums[checksum];
        if (!bros) {
          bros = [];
          this.sums[checksum] = bros;
        }
        bros.push(playerId);
        if (bros.length > this.max) {
          this.max = bros.length;
        }
        if (bros.length > 1) {
          this.minorConsensus = checksum;
        }
        if (playerId === defaultProviderId) {
          this.defaultProviderCrc = checksum;
        }
      } else {
        return null;
      }
      if (this.count === clientIds.length) {
        if (this.max === this.count) {
          return null;
        } else {
          providerId = defaultProviderId;
          if (this.minorConsensus !== null) {
            providerId = this.sums[this.minorConsensus][0];
          }
          _ref = this.sums;
          _results = [];
          for (crc in _ref) {
            playerIds = _ref[crc];
            if (crc !== this.minorConsensus) {
              _results.push((function() {
                var _i, _len, _results1;
                _results1 = [];
                for (_i = 0, _len = playerIds.length; _i < _len; _i++) {
                  errantId = playerIds[_i];
                  if (errantId !== providerId) {
                    authorityLabel = "the default provider's";
                    authorityChecksum = this.defaultProviderCrc;
                    if (this.minorConsensus) {
                      authorityLabel = "the minority consensus";
                      authorityChecksum = this.minorConsensus;
                    }
                    this._debug("Requesting gamestate be sent from " + providerId + " -> to -> " + errantId + " because his crc " + crc + "(" + (typeof crc) + ") didn't match " + authorityLabel + " crc " + authorityChecksum + "(" + (typeof authorityChecksum) + ")", this.sums);
                    _results1.push(resync(providerId, errantId));
                  } else {
                    _results1.push(void 0);
                  }
                }
                return _results1;
              }).call(this));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      }
    };

    SyncManager.prototype._debug = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (this._debugOn) {
        return console.log.apply(console, [">>> [SyncManager]"].concat(__slice.call(args)));
      }
    };

    return SyncManager;

  })();

  module.exports = SyncManager;

}).call(this);
